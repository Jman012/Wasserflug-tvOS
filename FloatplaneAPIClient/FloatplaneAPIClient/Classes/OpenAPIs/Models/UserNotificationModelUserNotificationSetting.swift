//
// UserNotificationModelUserNotificationSetting.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct UserNotificationModelUserNotificationSetting: Content, Hashable {

    public var createdAt: Date?
    public var updatedAt: Date?
    public var id: String?
    public var contentEmail: Bool
    public var contentFirebase: Bool
    public var creatorMessageEmail: Bool
    public var user: String
    public var creator: String

    public init(createdAt: Date? = nil, updatedAt: Date? = nil, id: String? = nil, contentEmail: Bool, contentFirebase: Bool, creatorMessageEmail: Bool, user: String, creator: String) {
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.id = id
        self.contentEmail = contentEmail
        self.contentFirebase = contentFirebase
        self.creatorMessageEmail = creatorMessageEmail
        self.user = user
        self.creator = creator
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case updatedAt
        case id
        case contentEmail
        case contentFirebase
        case creatorMessageEmail
        case user
        case creator
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(contentEmail, forKey: .contentEmail)
        try container.encode(contentFirebase, forKey: .contentFirebase)
        try container.encode(creatorMessageEmail, forKey: .creatorMessageEmail)
        try container.encode(user, forKey: .user)
        try container.encode(creator, forKey: .creator)
    }
}

