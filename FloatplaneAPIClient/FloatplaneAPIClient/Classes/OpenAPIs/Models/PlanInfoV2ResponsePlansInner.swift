//
// PlanInfoV2ResponsePlansInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct PlanInfoV2ResponsePlansInner: Content, Hashable {

    public var id: String
    public var title: String
    public var description: String
    public var price: String?
    public var priceYearly: String?
    public var currency: String
    public var logo: String?
    public var interval: String
    public var featured: Bool
    public var allowGrandfatheredAccess: Bool?
    public var discordServers: [DiscordServerModel]
    public var discordRoles: [DiscordRoleModel]
    public var createdAt: Date
    public var updatedAt: Date?
    public var enabled: Bool
    public var paymentID: Int?
    public var trialPeriod: Double
    public var creator: String
    public var userIsSubscribed: Bool
    public var userIsGrandfathered: Bool?
    public var enabledGlobal: Bool

    public init(id: String, title: String, description: String, price: String?, priceYearly: String?, currency: String, logo: String?, interval: String, featured: Bool, allowGrandfatheredAccess: Bool? = nil, discordServers: [DiscordServerModel], discordRoles: [DiscordRoleModel], createdAt: Date, updatedAt: Date?, enabled: Bool, paymentID: Int?, trialPeriod: Double, creator: String, userIsSubscribed: Bool, userIsGrandfathered: Bool? = nil, enabledGlobal: Bool) {
        self.id = id
        self.title = title
        self.description = description
        self.price = price
        self.priceYearly = priceYearly
        self.currency = currency
        self.logo = logo
        self.interval = interval
        self.featured = featured
        self.allowGrandfatheredAccess = allowGrandfatheredAccess
        self.discordServers = discordServers
        self.discordRoles = discordRoles
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.enabled = enabled
        self.paymentID = paymentID
        self.trialPeriod = trialPeriod
        self.creator = creator
        self.userIsSubscribed = userIsSubscribed
        self.userIsGrandfathered = userIsGrandfathered
        self.enabledGlobal = enabledGlobal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case description
        case price
        case priceYearly
        case currency
        case logo
        case interval
        case featured
        case allowGrandfatheredAccess
        case discordServers
        case discordRoles
        case createdAt
        case updatedAt
        case enabled
        case paymentID
        case trialPeriod
        case creator
        case userIsSubscribed
        case userIsGrandfathered
        case enabledGlobal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(description, forKey: .description)
        try container.encode(price, forKey: .price)
        try container.encode(priceYearly, forKey: .priceYearly)
        try container.encode(currency, forKey: .currency)
        try container.encode(logo, forKey: .logo)
        try container.encode(interval, forKey: .interval)
        try container.encode(featured, forKey: .featured)
        try container.encodeIfPresent(allowGrandfatheredAccess, forKey: .allowGrandfatheredAccess)
        try container.encode(discordServers, forKey: .discordServers)
        try container.encode(discordRoles, forKey: .discordRoles)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(paymentID, forKey: .paymentID)
        try container.encode(trialPeriod, forKey: .trialPeriod)
        try container.encode(creator, forKey: .creator)
        try container.encode(userIsSubscribed, forKey: .userIsSubscribed)
        try container.encodeIfPresent(userIsGrandfathered, forKey: .userIsGrandfathered)
        try container.encode(enabledGlobal, forKey: .enabledGlobal)
    }
}

