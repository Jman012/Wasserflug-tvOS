//
// ConnectedAccountModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct ConnectedAccountModel: Content, Hashable {

    /** Unique identifier for the account type. */
    public var key: String
    /** Display-friendly label for the `key`. */
    public var name: String
    /** Determines if the system allows this account to be connected to. */
    public var enabled: Bool
    public var iconWhite: String
    public var connectedAccount: ConnectedAccountModelConnectedAccount?
    /** If true, the user is connected and the `connectedAccount` will have data about the account. */
    public var connected: Bool
    public var isAccountProvider: Bool

    public init(key: String, name: String, enabled: Bool, iconWhite: String, connectedAccount: ConnectedAccountModelConnectedAccount?, connected: Bool, isAccountProvider: Bool) {
        self.key = key
        self.name = name
        self.enabled = enabled
        self.iconWhite = iconWhite
        self.connectedAccount = connectedAccount
        self.connected = connected
        self.isAccountProvider = isAccountProvider
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case key
        case name
        case enabled
        case iconWhite
        case connectedAccount
        case connected
        case isAccountProvider
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(key, forKey: .key)
        try container.encode(name, forKey: .name)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(iconWhite, forKey: .iconWhite)
        try container.encode(connectedAccount, forKey: .connectedAccount)
        try container.encode(connected, forKey: .connected)
        try container.encode(isAccountProvider, forKey: .isAccountProvider)
    }
}

