//
// ContentVideoV3Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct ContentVideoV3Response: Content, Hashable {

    public enum UserInteraction: String, Content, Hashable, CaseIterable {
        case like = "like"
        case dislike = "dislike"
    }
    public var id: String
    public var guid: String
    public var title: String
    public var type: String
    public var description: String
    public var releaseDate: Date?
    /** Unit: seconds. */
    public var duration: Double
    public var creator: String
    public var likes: Int
    public var dislikes: Int
    public var score: Int
    public var isProcessing: Bool
    public var primaryBlogPost: String
    public var thumbnail: ImageModel
    /** If false, the post should be marked as locked and not viewable by the user. */
    public var isAccessible: Bool
    public var blogPosts: [String]
    public var timelineSprite: ImageModel
    /** The watch progress of the video, in seconds. If no progress has yet been posted to the video, then this field may not appear. */
    public var progress: Int?
    public var userInteraction: [UserInteraction]?
    public var levels: [ContentVideoV3ResponseLevelsInner]

    public init(id: String, guid: String, title: String, type: String, description: String, releaseDate: Date?, duration: Double, creator: String, likes: Int, dislikes: Int, score: Int, isProcessing: Bool, primaryBlogPost: String, thumbnail: ImageModel, isAccessible: Bool, blogPosts: [String], timelineSprite: ImageModel, progress: Int? = nil, userInteraction: [UserInteraction]?, levels: [ContentVideoV3ResponseLevelsInner]) {
        self.id = id
        self.guid = guid
        self.title = title
        self.type = type
        self.description = description
        self.releaseDate = releaseDate
        self.duration = duration
        self.creator = creator
        self.likes = likes
        self.dislikes = dislikes
        self.score = score
        self.isProcessing = isProcessing
        self.primaryBlogPost = primaryBlogPost
        self.thumbnail = thumbnail
        self.isAccessible = isAccessible
        self.blogPosts = blogPosts
        self.timelineSprite = timelineSprite
        self.progress = progress
        self.userInteraction = userInteraction
        self.levels = levels
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case guid
        case title
        case type
        case description
        case releaseDate
        case duration
        case creator
        case likes
        case dislikes
        case score
        case isProcessing
        case primaryBlogPost
        case thumbnail
        case isAccessible
        case blogPosts
        case timelineSprite
        case progress
        case userInteraction
        case levels
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(guid, forKey: .guid)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encode(description, forKey: .description)
        try container.encode(releaseDate, forKey: .releaseDate)
        try container.encode(duration, forKey: .duration)
        try container.encode(creator, forKey: .creator)
        try container.encode(likes, forKey: .likes)
        try container.encode(dislikes, forKey: .dislikes)
        try container.encode(score, forKey: .score)
        try container.encode(isProcessing, forKey: .isProcessing)
        try container.encode(primaryBlogPost, forKey: .primaryBlogPost)
        try container.encode(thumbnail, forKey: .thumbnail)
        try container.encode(isAccessible, forKey: .isAccessible)
        try container.encode(blogPosts, forKey: .blogPosts)
        try container.encode(timelineSprite, forKey: .timelineSprite)
        try container.encodeIfPresent(progress, forKey: .progress)
        try container.encode(userInteraction, forKey: .userInteraction)
        try container.encode(levels, forKey: .levels)
    }
}

