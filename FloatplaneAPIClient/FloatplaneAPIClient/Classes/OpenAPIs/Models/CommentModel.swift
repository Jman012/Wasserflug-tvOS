//
// CommentModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct CommentModel: Content, Hashable {

    public enum UserInteraction: String, Content, Hashable, CaseIterable {
        case like = "like"
        case dislike = "dislike"
    }
    public var id: String
    public var blogPost: String
    public var user: UserModel
    public var text: String
    public var replying: String?
    public var postDate: Date
    public var editDate: Date?
    public var pinDate: Date?
    public var editCount: Int
    public var isEdited: Bool
    public var likes: Int
    public var dislikes: Int
    public var score: Int
    public var interactionCounts: CommentV3PostResponseInteractionCounts
    public var totalReplies: Int?
    /** This is present (but possibly empty) for top-level comments. This is never present for reply comments. */
    public var replies: [CommentModel]?
    public var userInteraction: [UserInteraction]?

    public init(id: String, blogPost: String, user: UserModel, text: String, replying: String?, postDate: Date, editDate: Date?, pinDate: Date? = nil, editCount: Int, isEdited: Bool, likes: Int, dislikes: Int, score: Int, interactionCounts: CommentV3PostResponseInteractionCounts, totalReplies: Int? = nil, replies: [CommentModel]? = nil, userInteraction: [UserInteraction]?) {
        self.id = id
        self.blogPost = blogPost
        self.user = user
        self.text = text
        self.replying = replying
        self.postDate = postDate
        self.editDate = editDate
        self.pinDate = pinDate
        self.editCount = editCount
        self.isEdited = isEdited
        self.likes = likes
        self.dislikes = dislikes
        self.score = score
        self.interactionCounts = interactionCounts
        self.totalReplies = totalReplies
        self.replies = replies
        self.userInteraction = userInteraction
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case blogPost
        case user
        case text
        case replying
        case postDate
        case editDate
        case pinDate
        case editCount
        case isEdited
        case likes
        case dislikes
        case score
        case interactionCounts
        case totalReplies
        case replies
        case userInteraction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(blogPost, forKey: .blogPost)
        try container.encode(user, forKey: .user)
        try container.encode(text, forKey: .text)
        try container.encode(replying, forKey: .replying)
        try container.encode(postDate, forKey: .postDate)
        try container.encode(editDate, forKey: .editDate)
        try container.encodeIfPresent(pinDate, forKey: .pinDate)
        try container.encode(editCount, forKey: .editCount)
        try container.encode(isEdited, forKey: .isEdited)
        try container.encode(likes, forKey: .likes)
        try container.encode(dislikes, forKey: .dislikes)
        try container.encode(score, forKey: .score)
        try container.encode(interactionCounts, forKey: .interactionCounts)
        try container.encodeIfPresent(totalReplies, forKey: .totalReplies)
        try container.encodeIfPresent(replies, forKey: .replies)
        try container.encode(userInteraction, forKey: .userInteraction)
    }
}

