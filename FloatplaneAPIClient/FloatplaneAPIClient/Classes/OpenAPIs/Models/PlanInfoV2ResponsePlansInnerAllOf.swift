//
// PlanInfoV2ResponsePlansInnerAllOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif
import Vapor

public struct PlanInfoV2ResponsePlansInnerAllOf: Content, Hashable {

    public var createdAt: Date
    public var updatedAt: Date?
    public var enabled: Bool
    public var paymentID: Int?
    public var trialPeriod: Double
    public var creator: String
    public var userIsSubscribed: Bool
    public var userIsGrandfathered: Bool
    public var enabledGlobal: Bool

    public init(createdAt: Date, updatedAt: Date?, enabled: Bool, paymentID: Int?, trialPeriod: Double, creator: String, userIsSubscribed: Bool, userIsGrandfathered: Bool, enabledGlobal: Bool) {
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.enabled = enabled
        self.paymentID = paymentID
        self.trialPeriod = trialPeriod
        self.creator = creator
        self.userIsSubscribed = userIsSubscribed
        self.userIsGrandfathered = userIsGrandfathered
        self.enabledGlobal = enabledGlobal
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt
        case updatedAt
        case enabled
        case paymentID
        case trialPeriod
        case creator
        case userIsSubscribed
        case userIsGrandfathered
        case enabledGlobal
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(paymentID, forKey: .paymentID)
        try container.encode(trialPeriod, forKey: .trialPeriod)
        try container.encode(creator, forKey: .creator)
        try container.encode(userIsSubscribed, forKey: .userIsSubscribed)
        try container.encode(userIsGrandfathered, forKey: .userIsGrandfathered)
        try container.encode(enabledGlobal, forKey: .enabledGlobal)
    }
}

