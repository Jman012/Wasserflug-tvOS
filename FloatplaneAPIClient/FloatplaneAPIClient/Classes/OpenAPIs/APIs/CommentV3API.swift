//
// CommentV3API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CommentV3API {

    /**
     Dislike Comment
     POST /api/v3/comment/dislike
     Dislike a comment on a blog post.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentLikeV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func dislikeCommentRaw(commentLikeV3PostRequest: CommentLikeV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/comment/dislike"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(commentLikeV3PostRequest, using: Configuration.contentConfiguration.requireEncoder(for: CommentLikeV3PostRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum DislikeComment {
        case http200(value: String, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Dislike Comment
     POST /api/v3/comment/dislike
     Dislike a comment on a blog post.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentLikeV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `DislikeComment` 
     */
    open class func dislikeComment(commentLikeV3PostRequest: CommentLikeV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<DislikeComment> {
        return dislikeCommentRaw(commentLikeV3PostRequest: commentLikeV3PostRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> DislikeComment in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(String.self, using: Configuration.contentConfiguration.requireDecoder(for: String.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Comment Replies
     GET /api/v3/comment/replies
     Retrieve more replies from a comment.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter comment: (query) The identifer of the comment from which to retrieve replies. 
     - parameter blogPost: (query) The identifer of the blog post the `comment` belongs to. 
     - parameter limit: (query) How many replies to retrieve. 
     - parameter rid: (query) The identifer of the last reply in the reply chain. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getCommentRepliesRaw(comment: String, blogPost: String, limit: Int, rid: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/comment/replies"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var comment: String
                var blogPost: String
                var limit: Int
                var rid: String

                enum CodingKeys: String, CodingKey {
                    case comment = "comment"
                    case blogPost = "blogPost"
                    case limit = "limit"
                    case rid = "rid"
                }
            }
            try localVariableRequest.query.encode(QueryParams(comment: comment, blogPost: blogPost, limit: limit, rid: rid))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetCommentReplies {
        case http200(value: [CommentModel], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Comment Replies
     GET /api/v3/comment/replies
     Retrieve more replies from a comment.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter comment: (query) The identifer of the comment from which to retrieve replies. 
     - parameter blogPost: (query) The identifer of the blog post the `comment` belongs to. 
     - parameter limit: (query) How many replies to retrieve. 
     - parameter rid: (query) The identifer of the last reply in the reply chain. 
     - returns: `EventLoopFuture` of `GetCommentReplies` 
     */
    open class func getCommentReplies(comment: String, blogPost: String, limit: Int, rid: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetCommentReplies> {
        return getCommentRepliesRaw(comment: comment, blogPost: blogPost, limit: limit, rid: rid, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetCommentReplies in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([CommentModel].self, using: Configuration.contentConfiguration.requireDecoder(for: [CommentModel].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Comments
     GET /api/v3/comment
     Get comments for a blog post object. Note that replies to each comment tend to be limited to 3. The extra replies can be retrieved via `getCommentReplies`. The difference in `$response.body#/0/totalReplies` and `$response.body#/0/replies`'s length can determine if more comments need to be loaded.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter blogPost: (query) Which blog post to retrieve comments for. 
     - parameter limit: (query) The maximum number of comments to return. This should be set to 20 by default. 
     - parameter fetchAfter: (query) When loading more comments on a blog post, this is used to determine which which comments to skip. This is a GUID of the last comment from the previous call to `getComments`. (optional)
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getCommentsRaw(blogPost: String, limit: Int, fetchAfter: String? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/comment"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var blogPost: String
                var limit: Int
                var fetchAfter: String?

                enum CodingKeys: String, CodingKey {
                    case blogPost = "blogPost"
                    case limit = "limit"
                    case fetchAfter = "fetchAfter"
                }
            }
            try localVariableRequest.query.encode(QueryParams(blogPost: blogPost, limit: limit, fetchAfter: fetchAfter))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetComments {
        case http200(value: [CommentModel], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Comments
     GET /api/v3/comment
     Get comments for a blog post object. Note that replies to each comment tend to be limited to 3. The extra replies can be retrieved via `getCommentReplies`. The difference in `$response.body#/0/totalReplies` and `$response.body#/0/replies`'s length can determine if more comments need to be loaded.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter blogPost: (query) Which blog post to retrieve comments for. 
     - parameter limit: (query) The maximum number of comments to return. This should be set to 20 by default. 
     - parameter fetchAfter: (query) When loading more comments on a blog post, this is used to determine which which comments to skip. This is a GUID of the last comment from the previous call to `getComments`. (optional)
     - returns: `EventLoopFuture` of `GetComments` 
     */
    open class func getComments(blogPost: String, limit: Int, fetchAfter: String? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetComments> {
        return getCommentsRaw(blogPost: blogPost, limit: limit, fetchAfter: fetchAfter, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetComments in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([CommentModel].self, using: Configuration.contentConfiguration.requireDecoder(for: [CommentModel].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Like Comment
     POST /api/v3/comment/like
     Like a comment on a blog post.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentLikeV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func likeCommentRaw(commentLikeV3PostRequest: CommentLikeV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/comment/like"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(commentLikeV3PostRequest, using: Configuration.contentConfiguration.requireEncoder(for: CommentLikeV3PostRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum LikeComment {
        case http200(value: String, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Like Comment
     POST /api/v3/comment/like
     Like a comment on a blog post.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentLikeV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `LikeComment` 
     */
    open class func likeComment(commentLikeV3PostRequest: CommentLikeV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<LikeComment> {
        return likeCommentRaw(commentLikeV3PostRequest: commentLikeV3PostRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> LikeComment in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(String.self, using: Configuration.contentConfiguration.requireDecoder(for: String.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Post Comment
     POST /api/v3/comment
     Post a new comment to a blog post object.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func postCommentRaw(commentV3PostRequest: CommentV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/comment"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(commentV3PostRequest, using: Configuration.contentConfiguration.requireEncoder(for: CommentV3PostRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum PostComment {
        case http200(value: CommentV3PostResponse, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Post Comment
     POST /api/v3/comment
     Post a new comment to a blog post object.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter commentV3PostRequest: (body)  
     - returns: `EventLoopFuture` of `PostComment` 
     */
    open class func postComment(commentV3PostRequest: CommentV3PostRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<PostComment> {
        return postCommentRaw(commentV3PostRequest: commentV3PostRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> PostComment in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(CommentV3PostResponse.self, using: Configuration.contentConfiguration.requireDecoder(for: CommentV3PostResponse.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }
}
