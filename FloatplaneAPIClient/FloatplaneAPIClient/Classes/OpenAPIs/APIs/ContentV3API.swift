//
// ContentV3API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ContentV3API {

    /**
     Dislike Content
     POST /api/v3/content/dislike
     Toggles the dislike status on a piece of content. If liked before, it will turn into a dislike. If disliked before, the dislike will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func dislikeContentRaw(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/dislike"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(contentLikeV3Request, using: Configuration.contentConfiguration.requireEncoder(for: ContentLikeV3Request.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum DislikeContent {
        case http200(value: [String], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Dislike Content
     POST /api/v3/content/dislike
     Toggles the dislike status on a piece of content. If liked before, it will turn into a dislike. If disliked before, the dislike will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `DislikeContent` 
     */
    open class func dislikeContent(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<DislikeContent> {
        return dislikeContentRaw(contentLikeV3Request: contentLikeV3Request, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> DislikeContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([String].self, using: Configuration.contentConfiguration.requireDecoder(for: [String].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Blog Post
     GET /api/v3/content/post
     Retrieve more details on a specific blog post object for viewing.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the post to be retrieved. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getBlogPostRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/post"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetBlogPost {
        case http200(value: ContentPostV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Blog Post
     GET /api/v3/content/post
     Retrieve more details on a specific blog post object for viewing.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the post to be retrieved. 
     - returns: `EventLoopFuture` of `GetBlogPost` 
     */
    open class func getBlogPost(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetBlogPost> {
        return getBlogPostRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetBlogPost in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentPostV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentPostV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Content Tags
     GET /api/v3/content/tags
     Retrieve all tags and the number of times the tags have been used for the specified creator(s).
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter creatorIds: (query) The creator(s) to search by. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getContentTagsRaw(creatorIds: [String], headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/tags"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var creatorIds: [String]

                enum CodingKeys: String, CodingKey {
                    case creatorIds = "creatorIds"
                }
            }
            try localVariableRequest.query.encode(QueryParams(creatorIds: creatorIds))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetContentTags {
        case http200(value: [String: Int], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Content Tags
     GET /api/v3/content/tags
     Retrieve all tags and the number of times the tags have been used for the specified creator(s).
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter creatorIds: (query) The creator(s) to search by. 
     - returns: `EventLoopFuture` of `GetContentTags` 
     */
    open class func getContentTags(creatorIds: [String], headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetContentTags> {
        return getContentTagsRaw(creatorIds: creatorIds, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetContentTags in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([String: Int].self, using: Configuration.contentConfiguration.requireDecoder(for: [String: Int].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_getCreatorBlogPosts: String, CaseIterable, Content {
        case asc = "ASC"
        case desc = "DESC"
    }

    /**
     Get Creator Blog Posts
     GET /api/v3/content/creator
     Retrieve a paginated list of blog posts from a creator. Or search for blog posts from a creator.  Example query: https://www.floatplane.com/api/v3/content/creator?id=59f94c0bdd241b70349eb72b&fromDate=2021-07-24T07:00:00.001Z&toDate=2022-07-27T06:59:59.099Z&hasVideo=true&hasAudio=true&hasPicture=false&hasText=false&fromDuration=1020&toDuration=9900&sort=DESC&search=thor&tags[0]=tjm
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The GUID of the creator to retrieve posts from. 
     - parameter channel: (query) The id of a creator's specific channel from which to retrieve posts. (optional)
     - parameter limit: (query) The maximum number of posts to return. (optional)
     - parameter fetchAfter: (query) The number of posts to skip. Usually a multiple of `limit`, to get the next \"page\" of results. (optional)
     - parameter search: (query) Search filter to look for specific posts. (optional)
     - parameter tags: (query) An array of tags to search against, possibly in addition to `search`. (optional)
     - parameter hasVideo: (query) If true, include blog posts with video attachments. (optional)
     - parameter hasAudio: (query) If true, include blog posts with audio attachments. (optional)
     - parameter hasPicture: (query) If true, include blog posts with picture attachments. (optional)
     - parameter hasText: (query) If true, only include blog posts that are text-only. Text-only posts are ones without any attachments, such as video, audio, picture, and gallery.  This filter and `hasVideo`, `hasAudio`, and `hasPicture` should be mutually exclusive. That is, if `hasText` is true then the other three should all be false. Conversely, if any of the other three are true, then `hasText` should be false. Otherwise, the filter would produce no results. (optional)
     - parameter sort: (query) `DESC` = Newest First. `ASC` = Oldest First. (optional)
     - parameter fromDuration: (query) Include video posts where the duration of the video is at minimum `fromDuration` seconds long. Usually in multiples of 60 seconds. Implies `hasVideo=true`. (optional)
     - parameter toDuration: (query) Include video posts where the duration of the video is at maximum `toDuration` seconds long. Usually in multiples of 60 seconds. Implies `hasVideo=true`. (optional)
     - parameter fromDate: (query) Include posts where the publication date is on or after this filter date. (optional)
     - parameter toDate: (query) Include posts where the publication date is on or before this filter date. (optional)
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getCreatorBlogPostsRaw(id: String, channel: String? = nil, limit: Int? = nil, fetchAfter: Int? = nil, search: String? = nil, tags: [String]? = nil, hasVideo: Bool? = nil, hasAudio: Bool? = nil, hasPicture: Bool? = nil, hasText: Bool? = nil, sort: Sort_getCreatorBlogPosts? = nil, fromDuration: Int? = nil, toDuration: Int? = nil, fromDate: Date? = nil, toDate: Date? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/creator"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String
                var channel: String?
                var limit: Int?
                var fetchAfter: Int?
                var search: String?
                var tags: [String]?
                var hasVideo: Bool?
                var hasAudio: Bool?
                var hasPicture: Bool?
                var hasText: Bool?
                var sort: Sort_getCreatorBlogPosts?
                var fromDuration: Int?
                var toDuration: Int?
                var fromDate: Date?
                var toDate: Date?

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                    case channel = "channel"
                    case limit = "limit"
                    case fetchAfter = "fetchAfter"
                    case search = "search"
                    case tags = "tags"
                    case hasVideo = "hasVideo"
                    case hasAudio = "hasAudio"
                    case hasPicture = "hasPicture"
                    case hasText = "hasText"
                    case sort = "sort"
                    case fromDuration = "fromDuration"
                    case toDuration = "toDuration"
                    case fromDate = "fromDate"
                    case toDate = "toDate"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id, channel: channel, limit: limit, fetchAfter: fetchAfter, search: search, tags: tags, hasVideo: hasVideo, hasAudio: hasAudio, hasPicture: hasPicture, hasText: hasText, sort: sort, fromDuration: fromDuration, toDuration: toDuration, fromDate: fromDate, toDate: toDate))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetCreatorBlogPosts {
        case http200(value: [BlogPostModelV3], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Creator Blog Posts
     GET /api/v3/content/creator
     Retrieve a paginated list of blog posts from a creator. Or search for blog posts from a creator.  Example query: https://www.floatplane.com/api/v3/content/creator?id=59f94c0bdd241b70349eb72b&fromDate=2021-07-24T07:00:00.001Z&toDate=2022-07-27T06:59:59.099Z&hasVideo=true&hasAudio=true&hasPicture=false&hasText=false&fromDuration=1020&toDuration=9900&sort=DESC&search=thor&tags[0]=tjm
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The GUID of the creator to retrieve posts from. 
     - parameter channel: (query) The id of a creator's specific channel from which to retrieve posts. (optional)
     - parameter limit: (query) The maximum number of posts to return. (optional)
     - parameter fetchAfter: (query) The number of posts to skip. Usually a multiple of `limit`, to get the next \"page\" of results. (optional)
     - parameter search: (query) Search filter to look for specific posts. (optional)
     - parameter tags: (query) An array of tags to search against, possibly in addition to `search`. (optional)
     - parameter hasVideo: (query) If true, include blog posts with video attachments. (optional)
     - parameter hasAudio: (query) If true, include blog posts with audio attachments. (optional)
     - parameter hasPicture: (query) If true, include blog posts with picture attachments. (optional)
     - parameter hasText: (query) If true, only include blog posts that are text-only. Text-only posts are ones without any attachments, such as video, audio, picture, and gallery.  This filter and `hasVideo`, `hasAudio`, and `hasPicture` should be mutually exclusive. That is, if `hasText` is true then the other three should all be false. Conversely, if any of the other three are true, then `hasText` should be false. Otherwise, the filter would produce no results. (optional)
     - parameter sort: (query) `DESC` = Newest First. `ASC` = Oldest First. (optional)
     - parameter fromDuration: (query) Include video posts where the duration of the video is at minimum `fromDuration` seconds long. Usually in multiples of 60 seconds. Implies `hasVideo=true`. (optional)
     - parameter toDuration: (query) Include video posts where the duration of the video is at maximum `toDuration` seconds long. Usually in multiples of 60 seconds. Implies `hasVideo=true`. (optional)
     - parameter fromDate: (query) Include posts where the publication date is on or after this filter date. (optional)
     - parameter toDate: (query) Include posts where the publication date is on or before this filter date. (optional)
     - returns: `EventLoopFuture` of `GetCreatorBlogPosts` 
     */
    open class func getCreatorBlogPosts(id: String, channel: String? = nil, limit: Int? = nil, fetchAfter: Int? = nil, search: String? = nil, tags: [String]? = nil, hasVideo: Bool? = nil, hasAudio: Bool? = nil, hasPicture: Bool? = nil, hasText: Bool? = nil, sort: Sort_getCreatorBlogPosts? = nil, fromDuration: Int? = nil, toDuration: Int? = nil, fromDate: Date? = nil, toDate: Date? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetCreatorBlogPosts> {
        return getCreatorBlogPostsRaw(id: id, channel: channel, limit: limit, fetchAfter: fetchAfter, search: search, tags: tags, hasVideo: hasVideo, hasAudio: hasAudio, hasPicture: hasPicture, hasText: hasText, sort: sort, fromDuration: fromDuration, toDuration: toDuration, fromDate: fromDate, toDate: toDate, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetCreatorBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([BlogPostModelV3].self, using: Configuration.contentConfiguration.requireDecoder(for: [BlogPostModelV3].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Multi Creator Blog Posts
     GET /api/v3/content/creator/list
     Retrieve paginated blog posts from multiple creators for the home page.  Example query: https://www.floatplane.com/api/v3/content/creator/list?ids[0]=59f94c0bdd241b70349eb72b&limit=20&fetchAfter[0][creatorId]=59f94c0bdd241b70349eb72b&fetchAfter[0][blogPostId]=B4WsyLnybS&fetchAfter[0][moreFetchable]=true
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter ids: (query) The GUID(s) of the creator(s) to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to retrieve. 
     - parameter fetchAfter: (query) For pagination, this is used to determine which posts to skip. There should be one `fetchAfter` object for each creator in `ids`. The `moreFetchable` in the request, and all of the data, comes from the `ContentCreatorListV3Response`. (optional)
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getMultiCreatorBlogPostsRaw(ids: [String], limit: Int, fetchAfter: [ContentCreatorListLastItems]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/creator/list"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var ids: [String]
                var limit: Int
                var fetchAfter: [ContentCreatorListLastItems]?

                enum CodingKeys: String, CodingKey {
                    case ids = "ids"
                    case limit = "limit"
                    case fetchAfter = "fetchAfter"
                }
            }
            try localVariableRequest.query.encode(QueryParams(ids: ids, limit: limit, fetchAfter: fetchAfter))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetMultiCreatorBlogPosts {
        case http200(value: ContentCreatorListV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Multi Creator Blog Posts
     GET /api/v3/content/creator/list
     Retrieve paginated blog posts from multiple creators for the home page.  Example query: https://www.floatplane.com/api/v3/content/creator/list?ids[0]=59f94c0bdd241b70349eb72b&limit=20&fetchAfter[0][creatorId]=59f94c0bdd241b70349eb72b&fetchAfter[0][blogPostId]=B4WsyLnybS&fetchAfter[0][moreFetchable]=true
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter ids: (query) The GUID(s) of the creator(s) to retrieve posts from. 
     - parameter limit: (query) The maximum number of posts to retrieve. 
     - parameter fetchAfter: (query) For pagination, this is used to determine which posts to skip. There should be one `fetchAfter` object for each creator in `ids`. The `moreFetchable` in the request, and all of the data, comes from the `ContentCreatorListV3Response`. (optional)
     - returns: `EventLoopFuture` of `GetMultiCreatorBlogPosts` 
     */
    open class func getMultiCreatorBlogPosts(ids: [String], limit: Int, fetchAfter: [ContentCreatorListLastItems]? = nil, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetMultiCreatorBlogPosts> {
        return getMultiCreatorBlogPostsRaw(ids: ids, limit: limit, fetchAfter: fetchAfter, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetMultiCreatorBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentCreatorListV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentCreatorListV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Picture Content
     GET /api/v3/content/picture
     Retrieve more information on a picture attachment from a blog post in order to consume the picture content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the picture attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getPictureContentRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/picture"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetPictureContent {
        case http200(value: ContentPictureV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Picture Content
     GET /api/v3/content/picture
     Retrieve more information on a picture attachment from a blog post in order to consume the picture content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the picture attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `GetPictureContent` 
     */
    open class func getPictureContent(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetPictureContent> {
        return getPictureContentRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetPictureContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentPictureV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentPictureV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Progress
     POST /api/v3/content/get/progress
     Batch retrieval of watch progress values for blog posts. This API is useful for showing progress of a list of blog posts shown on the screen to the user. When retrieving a list of blog posts, the media attachments only include the identifier; when retrieving full details of a blog post, the attachments include more information, but still fail to return the progress of the media. Only when pulling the full video/audio content does the progress get included in the response. Thus, the recommended approach is to pull paginated results of blog posts first, as usual, and then to call this endpoint to retrieve progress values for each blog post to show in some capacity, usually on the thumbnail as a progress bar on the bottom.  Note that the progress values returned in this endpoint are different from the update progress endpoint and the values returned in video/audio attachments. While the latter are measured in seconds, this endpoint returns progress as a percentage of the media's total duration. It is presumed that the progress returned is from the first attachment in the blog post's `attachmentOrder` that is either a video or audio attachment. Because this returns progress as an integer percentage (0 to 100), it is not recommended to use this particular value for jumping to a timestamp in the media when resuming playback, as the rounded number may be off by plus/minus several seconds in actual playback. Use the actual attachment progress, measured in seconds, instead.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter getProgressRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getProgressRaw(getProgressRequest: GetProgressRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/get/progress"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(getProgressRequest, using: Configuration.contentConfiguration.requireEncoder(for: GetProgressRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetProgress {
        case http200(value: [GetProgressResponseInner], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Progress
     POST /api/v3/content/get/progress
     Batch retrieval of watch progress values for blog posts. This API is useful for showing progress of a list of blog posts shown on the screen to the user. When retrieving a list of blog posts, the media attachments only include the identifier; when retrieving full details of a blog post, the attachments include more information, but still fail to return the progress of the media. Only when pulling the full video/audio content does the progress get included in the response. Thus, the recommended approach is to pull paginated results of blog posts first, as usual, and then to call this endpoint to retrieve progress values for each blog post to show in some capacity, usually on the thumbnail as a progress bar on the bottom.  Note that the progress values returned in this endpoint are different from the update progress endpoint and the values returned in video/audio attachments. While the latter are measured in seconds, this endpoint returns progress as a percentage of the media's total duration. It is presumed that the progress returned is from the first attachment in the blog post's `attachmentOrder` that is either a video or audio attachment. Because this returns progress as an integer percentage (0 to 100), it is not recommended to use this particular value for jumping to a timestamp in the media when resuming playback, as the rounded number may be off by plus/minus several seconds in actual playback. Use the actual attachment progress, measured in seconds, instead.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter getProgressRequest: (body)  
     - returns: `EventLoopFuture` of `GetProgress` 
     */
    open class func getProgress(getProgressRequest: GetProgressRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetProgress> {
        return getProgressRaw(getProgressRequest: getProgressRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetProgress in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([GetProgressResponseInner].self, using: Configuration.contentConfiguration.requireDecoder(for: [GetProgressResponseInner].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Related Blog Posts
     GET /api/v3/content/related
     Retrieve a list of blog posts that are related to the post being viewed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the originating post. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getRelatedBlogPostsRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/related"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetRelatedBlogPosts {
        case http200(value: [BlogPostModelV3], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Related Blog Posts
     GET /api/v3/content/related
     Retrieve a list of blog posts that are related to the post being viewed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the originating post. 
     - returns: `EventLoopFuture` of `GetRelatedBlogPosts` 
     */
    open class func getRelatedBlogPosts(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetRelatedBlogPosts> {
        return getRelatedBlogPostsRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetRelatedBlogPosts in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([BlogPostModelV3].self, using: Configuration.contentConfiguration.requireDecoder(for: [BlogPostModelV3].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Get Video Content
     GET /api/v3/content/video
     Retrieve more information on a video attachment from a blog post in order to consume the video content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the video attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func getVideoContentRaw(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/video"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            struct QueryParams: Content {
                var id: String

                enum CodingKeys: String, CodingKey {
                    case id = "id"
                }
            }
            try localVariableRequest.query.encode(QueryParams(id: id))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum GetVideoContent {
        case http200(value: ContentVideoV3Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Get Video Content
     GET /api/v3/content/video
     Retrieve more information on a video attachment from a blog post in order to consume the video content.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter id: (query) The ID of the video attachment object, from the `BlogPostModelV3`. 
     - returns: `EventLoopFuture` of `GetVideoContent` 
     */
    open class func getVideoContent(id: String, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<GetVideoContent> {
        return getVideoContentRaw(id: id, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> GetVideoContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(ContentVideoV3Response.self, using: Configuration.contentConfiguration.requireDecoder(for: ContentVideoV3Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Like Content
     POST /api/v3/content/like
     Toggles the like status on a piece of content. If disliked before, it will turn into a like. If liked before, the like will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func likeContentRaw(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/like"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(contentLikeV3Request, using: Configuration.contentConfiguration.requireEncoder(for: ContentLikeV3Request.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum LikeContent {
        case http200(value: [String], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Like Content
     POST /api/v3/content/like
     Toggles the like status on a piece of content. If disliked before, it will turn into a like. If liked before, the like will be removed.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter contentLikeV3Request: (body)  
     - returns: `EventLoopFuture` of `LikeContent` 
     */
    open class func likeContent(contentLikeV3Request: ContentLikeV3Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<LikeContent> {
        return likeContentRaw(contentLikeV3Request: contentLikeV3Request, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> LikeContent in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([String].self, using: Configuration.contentConfiguration.requireDecoder(for: [String].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Update Progress
     POST /api/v3/content/progress
     Update the watch progress on a piece of media (usually video or audio), stored as the number of seconds in the media.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter updateProgressRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func updateProgressRaw(updateProgressRequest: UpdateProgressRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/content/progress"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(updateProgressRequest, using: Configuration.contentConfiguration.requireEncoder(for: UpdateProgressRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum UpdateProgress {
        case http200(value: String, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Update Progress
     POST /api/v3/content/progress
     Update the watch progress on a piece of media (usually video or audio), stored as the number of seconds in the media.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter updateProgressRequest: (body)  
     - returns: `EventLoopFuture` of `UpdateProgress` 
     */
    open class func updateProgress(updateProgressRequest: UpdateProgressRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<UpdateProgress> {
        return updateProgressRaw(updateProgressRequest: updateProgressRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> UpdateProgress in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(String.self, using: Configuration.contentConfiguration.requireDecoder(for: String.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }
}
