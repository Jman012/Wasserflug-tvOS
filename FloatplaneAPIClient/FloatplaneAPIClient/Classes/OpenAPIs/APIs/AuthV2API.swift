//
// AuthV2API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AuthV2API {

    /**
     Check For 2FA Login
     POST /api/v2/auth/checkFor2faLogin
     Complete the login process if a two-factor authentication token is required from the beginning of the login process.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - responseHeaders: [Set-Cookie(String)]
     - parameter checkFor2faLoginRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func checkFor2faLoginRaw(checkFor2faLoginRequest: CheckFor2faLoginRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v2/auth/checkFor2faLogin"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(checkFor2faLoginRequest, using: Configuration.contentConfiguration.requireEncoder(for: CheckFor2faLoginRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum CheckFor2faLogin {
        case http200(value: AuthLoginV2Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Check For 2FA Login
     POST /api/v2/auth/checkFor2faLogin
     Complete the login process if a two-factor authentication token is required from the beginning of the login process.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - responseHeaders: [Set-Cookie(String)]
     - parameter checkFor2faLoginRequest: (body)  
     - returns: `EventLoopFuture` of `CheckFor2faLogin` 
     */
    open class func checkFor2faLogin(checkFor2faLoginRequest: CheckFor2faLoginRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<CheckFor2faLogin> {
        return checkFor2faLoginRaw(checkFor2faLoginRequest: checkFor2faLoginRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> CheckFor2faLogin in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AuthLoginV2Response.self, using: Configuration.contentConfiguration.requireDecoder(for: AuthLoginV2Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Login
     POST /api/v2/auth/login
     Login to Floatplane with the provided username and password, retrieving the authentication/authorization cookie from the response for subsequent requests.
     - responseHeaders: [Set-Cookie(String)]
     - parameter authLoginV2Request: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func loginRaw(authLoginV2Request: AuthLoginV2Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v2/auth/login"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(authLoginV2Request, using: Configuration.contentConfiguration.requireEncoder(for: AuthLoginV2Request.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum Login {
        case http200(value: AuthLoginV2Response, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Login
     POST /api/v2/auth/login
     Login to Floatplane with the provided username and password, retrieving the authentication/authorization cookie from the response for subsequent requests.
     - responseHeaders: [Set-Cookie(String)]
     - parameter authLoginV2Request: (body)  
     - returns: `EventLoopFuture` of `Login` 
     */
    open class func login(authLoginV2Request: AuthLoginV2Request, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<Login> {
        return loginRaw(authLoginV2Request: authLoginV2Request, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> Login in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AuthLoginV2Response.self, using: Configuration.contentConfiguration.requireDecoder(for: AuthLoginV2Response.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Logout
     POST /api/v2/auth/logout
     Log out of Floatplane, invalidating the authentication/authorization cookie.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - responseHeaders: [Set-Cookie(String)]
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func logoutRaw(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v2/auth/logout"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum Logout {
        case http200(value: String, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Logout
     POST /api/v2/auth/logout
     Log out of Floatplane, invalidating the authentication/authorization cookie.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - responseHeaders: [Set-Cookie(String)]
     - returns: `EventLoopFuture` of `Logout` 
     */
    open class func logout(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<Logout> {
        return logoutRaw(headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> Logout in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(String.self, using: Configuration.contentConfiguration.requireDecoder(for: String.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }
}
