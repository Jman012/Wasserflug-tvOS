//
// SubscriptionsV3API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SubscriptionsV3API {

    /**
     List User Subscriptions
     GET /api/v3/user/subscriptions
     Retrieve a list of all active subscriptions for the user.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func listUserSubscriptionsV3Raw(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/user/subscriptions"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.GET, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum ListUserSubscriptionsV3 {
        case http200(value: [UserSubscriptionModel], raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     List User Subscriptions
     GET /api/v3/user/subscriptions
     Retrieve a list of all active subscriptions for the user.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `ListUserSubscriptionsV3` 
     */
    open class func listUserSubscriptionsV3(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ListUserSubscriptionsV3> {
        return listUserSubscriptionsV3Raw(headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> ListUserSubscriptionsV3 in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode([UserSubscriptionModel].self, using: Configuration.contentConfiguration.requireDecoder(for: [UserSubscriptionModel].defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }
}
