//
// PollV3API.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Vapor
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PollV3API {

    /**
     Poll Join Live Room
     POST /api/v3/poll/live/joinroom
     Used in Socket.IO/WebSocket connections. See the AsyncAPI documentation for more information. This should not be used on a raw HTTP connection.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func joinLiveRoomRaw(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/poll/live/joinroom"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum JoinLiveRoom {
        case http200(value: AnyCodable, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Poll Join Live Room
     POST /api/v3/poll/live/joinroom
     Used in Socket.IO/WebSocket connections. See the AsyncAPI documentation for more information. This should not be used on a raw HTTP connection.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `JoinLiveRoom` 
     */
    open class func joinLiveRoom(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<JoinLiveRoom> {
        return joinLiveRoomRaw(headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> JoinLiveRoom in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AnyCodable.self, using: Configuration.contentConfiguration.requireDecoder(for: AnyCodable.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Poll Leave Live Room
     POST /api/v3/poll/live/leaveLiveRoom
     Used in Socket.IO/WebSocket connections. See the AsyncAPI documentation for more information. This should not be used on a raw HTTP connection.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func leaveLiveRoomRaw(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/poll/live/leaveLiveRoom"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum LeaveLiveRoom {
        case http200(value: AnyCodable, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Poll Leave Live Room
     POST /api/v3/poll/live/leaveLiveRoom
     Used in Socket.IO/WebSocket connections. See the AsyncAPI documentation for more information. This should not be used on a raw HTTP connection.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - returns: `EventLoopFuture` of `LeaveLiveRoom` 
     */
    open class func leaveLiveRoom(headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<LeaveLiveRoom> {
        return leaveLiveRoomRaw(headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> LeaveLiveRoom in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AnyCodable.self, using: Configuration.contentConfiguration.requireDecoder(for: AnyCodable.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }

    /**
     Vote Poll
     POST /api/v3/poll/votePoll
     Vote on an option of a poll. Voting a second time or attempting to change a choice may result in an error.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter votePollRequest: (body)  
     - returns: `EventLoopFuture` of `ClientResponse` 
     */
    open class func votePollRaw(votePollRequest: VotePollRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<ClientResponse> {
        let localVariablePath = "/api/v3/poll/votePoll"
        let localVariableURLString = FloatplaneAPIClientAPI.basePath + localVariablePath

        guard let localVariableApiClient = Configuration.apiClient else {
            fatalError("Configuration.apiClient is not set.")
        }

        return localVariableApiClient.send(.POST, headers: headers, to: URI(string: localVariableURLString)) { localVariableRequest in
            try Configuration.apiWrapper(&localVariableRequest)
            
            
            try localVariableRequest.content.encode(votePollRequest, using: Configuration.contentConfiguration.requireEncoder(for: VotePollRequest.defaultContentType))
            
            try beforeSend(&localVariableRequest)
        }
    }

    public enum VotePoll {
        case http200(value: AnyCodable, raw: ClientResponse)
        case http400(value: ErrorModel, raw: ClientResponse)
        case http401(value: ErrorModel, raw: ClientResponse)
        case http403(value: ErrorModel, raw: ClientResponse)
        case http404(value: ErrorModel, raw: ClientResponse)
        case http429(raw: ClientResponse)
        case http0(value: ErrorModel, raw: ClientResponse)
    }

    /**
     Vote Poll
     POST /api/v3/poll/votePoll
     Vote on an option of a poll. Voting a second time or attempting to change a choice may result in an error.
     - API Key:
       - type: apiKey sails.sid 
       - name: CookieAuth
     - parameter votePollRequest: (body)  
     - returns: `EventLoopFuture` of `VotePoll` 
     */
    open class func votePoll(votePollRequest: VotePollRequest, headers: HTTPHeaders = FloatplaneAPIClientAPI.customHeaders, beforeSend: (inout ClientRequest) throws -> () = { _ in }) -> EventLoopFuture<VotePoll> {
        return votePollRaw(votePollRequest: votePollRequest, headers: headers, beforeSend: beforeSend).flatMapThrowing { response -> VotePoll in
            switch response.status.code {
            case 200:
                return .http200(value: try response.content.decode(AnyCodable.self, using: Configuration.contentConfiguration.requireDecoder(for: AnyCodable.defaultContentType)), raw: response)
            case 400:
                return .http400(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 401:
                return .http401(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 403:
                return .http403(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 404:
                return .http404(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            case 429:
                return .http429(raw: response)
            default:
                return .http0(value: try response.content.decode(ErrorModel.self, using: Configuration.contentConfiguration.requireDecoder(for: ErrorModel.defaultContentType)), raw: response)
            }
        }
    }
}
