--disable all

# --enable acronyms
# Capitalizes acronyms when the first character is capitalized.
# `--acronyms` | Acronyms to auto-capitalize. Defaults to "ID,URL,UUID".

# --enable andOperator
# Prefer comma over `&&` in `if`, `guard` or `while` conditions.

# --enable anyObjectProtocol
# Prefer `AnyObject` over `class` in protocol definitions.

# --enable assertionFailures
# Changes all instances of assert(false, ...) to assertionFailure(...)
# and precondition(false, ...) to preconditionFailure(...).

--enable blankLineAfterImports
# Insert blank line after import statements.

--enable blankLinesAroundMark
# Insert blank line before and after `MARK:` comments.
# `--lineaftermarks` | Insert blank line after "MARK:": "true" (default) or "false"

--enable blankLinesAtEndOfScope
# Remove trailing blank line at the end of a scope.

# --enable blankLinesAtStartOfScope
# Remove leading blank line at the start of a scope.
# `--typeblanklines` | "remove" (default) or "preserve" blank lines from types

# --enable blankLinesBetweenImports
# Remove blank lines between import statements.

--enable blankLinesBetweenScopes
# Insert blank line before class, struct, enum, extension, protocol or function
# declarations.

# --enable blockComments
# Changes block comments to single line comments.

--enable braces
# Wrap braces in accordance with selected style (K&R or Allman).
# `--allman` | Use allman indentation style: "true" or "false" (default)
--allman false

# --enable conditionalAssignment
# Assign properties using if / switch expressions.

--enable consecutiveBlankLines
# Replace consecutive blank lines with a single blank line.

--enable consecutiveSpaces
# Replace consecutive spaces with a single space.

--enable docComments
# Use doc comments for comments preceding declarations.

--enable duplicateImports
# Remove duplicate import statements.

--enable elseOnSameLine
# Place `else`, `catch` or `while` keyword in accordance with current style (same or
# next line).
# `--elseposition` | Placement of else/catch: "same-line" (default) or "next-line"
# `--guardelse` | Guard else: "same-line", "next-line" or "auto" (default)

# --enable emptyBraces
# Remove whitespace inside empty braces.
# `--emptybraces` | Empty braces: "no-space" (default), "spaced" or "linebreak"

# --enable enumNamespaces
# Converts types used for hosting only static members into enums (an empty enum is
# the canonical way to create a namespace in Swift as it can't be instantiated).
# `--enumnamespaces` | Change type to enum: "always" (default) or "structs-only"

# --enable extensionAccessControl
# Configure the placement of an extension's access control keyword.
# `--extensionacl` | Place ACL "on-extension" (default) or "on-declarations"

# --enable fileHeader
# Use specified source file header template for all files.
# `--header` | Header comments: "strip", "ignore", or the text you wish use

# --enable genericExtensions
# When extending generic types, use angle brackets (`extension Array<Foo>`)
# instead of generic type constraints (`extension Array where Element == Foo`).
# `--generictypes` | Semicolon-delimited list of generic types and type parameters

# --enable hoistAwait
# Move inline `await` keyword(s) to start of expression.
# `--asynccapturing` | List of functions with async @autoclosure arguments

--enable hoistPatternLet
# Reposition `let` or `var` bindings within pattern.
# `--patternlet` | let/var placement in patterns: "hoist" (default) or "inline"

--enable hoistTry
# Move inline `try` keyword(s) to start of expression.
# `--throwcapturing` | List of functions with throwing @autoclosure arguments

--enable indent
# Indent code in accordance with the scope level.
# `--indent` | Number of spaces to indent, or "tab" to use tabs
# `--tabwidth` | The width of a tab character. Defaults to "unspecified"
# `--smarttabs` | Align code independently of tab width. defaults to "enabled"
# `--indentcase` | Indent cases inside a switch: "true" or "false" (default)
# `--ifdef` | #if indenting: "indent" (default), "no-indent" or "outdent"
# `--xcodeindentation` | Match Xcode indenting: "enabled" or "disabled" (default)
# `--indentstrings` | Indent multiline strings: "false" (default) or "true"
--indent tab
--tabwidth 4
--smarttabs disabled
--indentcase false
--indentstrings false
--indentstrings false

# --enable initCoderUnavailable
# Add `@available(*, unavailable)` attribute to required `init(coder:)` when
# it hasn't been implemented.

--enable isEmpty
# Prefer `isEmpty` over comparing `count` against zero.

--enable leadingDelimiters
# Move leading delimiters to the end of the previous line.

--enable linebreakAtEndOfFile
# Add empty blank line at end of file.

--enable linebreaks
# Use specified linebreak character for all linebreaks (CR, LF or CRLF).
# `--linebreaks` | Linebreak character to use: "cr", "crlf" or "lf" (default)
--linebreaks lf

# --enable markTypes
# Adds a mark comment before top-level types and extensions.
# `--marktypes` | Mark types "always" (default), "never", "if-not-empty"
# `--typemark` | Template for type mark comments. Defaults to "MARK: - %t"
# `--markextensions` | Mark extensions "always" (default), "never", "if-not-empty"
# `--extensionmark` | Mark for standalone extensions. Defaults to "MARK: - %t + %c"
# `--groupedextension` | Mark for extension grouped with extended type. ("MARK: %c")

--enable modifierOrder
# Use consistent ordering for member modifiers.
# `--modifierorder` | Comma-delimited list of modifiers in preferred order

--enable numberFormatting
# Use consistent grouping for numeric literals. Groups will be separated by `_`
# delimiters to improve readability. For each numeric type you can specify a group
# size (the number of digits in each group) and a threshold (the minimum number of
# digits in a number before grouping is applied).
# `--decimalgrouping` | Decimal grouping,threshold (default: 3,6) or "none", "ignore"
# `--binarygrouping` | Binary grouping,threshold (default: 4,8) or "none", "ignore"
# `--octalgrouping` | Octal grouping,threshold (default: 4,8) or "none", "ignore"
# `--hexgrouping` | Hex grouping,threshold (default: 4,8) or "none", "ignore"
# `--fractiongrouping` | Group digits after '.': "enabled" or "disabled" (default)
# `--exponentgrouping` | Group exponent digits: "enabled" or "disabled" (default)
# `--hexliteralcase` | Casing for hex literals: "uppercase" (default) or "lowercase"
# `--exponentcase` | Case of 'e' in numbers: "lowercase" or "uppercase" (default)

# --enable opaqueGenericParameters
# Use opaque generic parameters (`some Protocol`) instead of generic parameters
# with constraints (`T where T: Protocol`, etc) where equivalent. Also supports
# primary associated types for common standard library types, so definitions like
# `T where T: Collection, T.Element == Foo` are updated to `some Collection<Foo>`.
# `--someAny` | Use `some Any` types: "true" (default) or "false"

# --enable organizeDeclarations
# Organizes declarations within class, struct, enum, actor, and extension bodies.
# `--categorymark` | Template for category mark comments. Defaults to "MARK: %c"
# `--markcategories` | Insert MARK comments between categories (true by default)
# `--beforemarks` | Declarations placed before first mark (e.g. `typealias,struct`)
# `--lifecycle` | Names of additional Lifecycle methods (e.g. `viewDidLoad`)
# `--organizetypes` | Declarations to organize (default: `class,actor,struct,enum`)
# `--structthreshold` | Minimum line count to organize struct body. Defaults to 0
# `--classthreshold` | Minimum line count to organize class body. Defaults to 0
# `--enumthreshold` | Minimum line count to organize enum body. Defaults to 0
# `--extensionlength` | Minimum line count to organize extension body. Defaults to 0

--enable preferKeyPath
# Convert trivial `map { $0.foo }` closures to keyPath-based syntax.

--enable redundantBackticks
# Remove redundant backticks around identifiers.

--enable redundantBreak
# Remove redundant `break` in switch case.

--enable redundantClosure
# Removes redundant closures bodies, containing a single statement,
# which are called immediately.

--enable redundantExtensionACL
# Remove redundant access control modifiers.

--enable redundantFileprivate
# Prefer `private` over `fileprivate` where equivalent.

--enable redundantGet
# Remove unneeded `get` clause inside computed properties.

--enable redundantInit
# Remove explicit `init` if not required.

--enable redundantLet
# Remove redundant `let`/`var` from ignored variables.

--enable redundantLetError
# Remove redundant `let error` from `catch` clause.

--enable redundantNilInit
# Remove redundant `nil` default value (Optional vars are nil by default).

--enable redundantObjc
# Remove redundant `@objc` annotations.

--enable redundantOptionalBinding
# Removes redundant identifiers in optional binding conditions.

--enable redundantParens
# Remove redundant parentheses.

--enable redundantPattern
# Remove redundant pattern matching parameter syntax.

# --enable redundantRawValues
# Remove redundant raw string values for enum cases.

# --enable redundantReturn
# Remove unneeded `return` keyword.

# --enable redundantSelf
# Insert/remove explicit `self` where applicable.
# `--self` | Explicit self: "insert", "remove" (default) or "init-only"
# `--selfrequired` | Comma-delimited list of functions with @autoclosure arguments

# --enable redundantType
# Remove redundant type from variable declarations.
# `--redundanttype` | "inferred", "explicit", or "infer-locals-only" (default)

--enable redundantVoidReturnType
# Remove explicit `Void` return type.
# `--closurevoid` | Closure void returns: "remove" (default) or "preserve"
--closurevoid preserve

--enable semicolons
# Remove semicolons.
# `--semicolons` | Allow semicolons: "never" or "inline" (default)

# --enable sortDeclarations
# Sorts the body of declarations with // swiftformat:sort
# and declarations between // swiftformat:sort:begin and
# // swiftformat:sort:end comments.

# --enable sortedImports
# Sort import statements alphabetically.
# `--importgrouping` | "testable-first/last", "alpha" (default) or "length"

# --enable sortedSwitchCases
# Sorts switch cases alphabetically.

--enable spaceAroundBraces
# Add or remove space around curly braces.

--enable spaceAroundBrackets
# Add or remove space around square brackets.

--enable spaceAroundComments
# Add space before and/or after comments.

--enable spaceAroundGenerics
# Remove space around angle brackets.

# --enable spaceAroundOperators
# Add or remove space around operators or delimiters.
# `--operatorfunc` | Spacing for operator funcs: "spaced" (default) or "no-space"
# `--nospaceoperators` | Comma-delimited list of operators without surrounding space
# `--ranges` | Spacing for ranges: "spaced" (default) or "no-space"

--enable spaceAroundParens
# Add or remove space around parentheses.

--enable spaceInsideBraces
# Add space inside curly braces.

--enable spaceInsideBrackets
# Remove space inside square brackets.

--enable spaceInsideComments
# Add leading and/or trailing space inside comments.

--enable spaceInsideGenerics
# Remove space inside angle brackets.

--enable spaceInsideParens
# Remove space inside parentheses.

# --enable specifiers
# Use consistent ordering for member modifiers.

# *Note: specifiers rule is deprecated. Use modifierOrder instead.*

# --enable strongOutlets
# Remove `weak` modifier from `@IBOutlet` properties.

# --enable strongifiedSelf
# Remove backticks around `self` in Optional unwrap expressions.

--enable todos
# Use correct formatting for `TODO:`, `MARK:` or `FIXME:` comments.

# --enable trailingClosures
# Use trailing closure syntax where applicable.
# `--trailingclosures` | Comma-delimited list of functions that use trailing closures
# `--nevertrailing` | List of functions that should never use trailing closures

--enable trailingCommas
# Add or remove trailing comma from the last item in a collection literal.
# `--commas` | Commas in collection literals: "always" (default) or "inline"

--enable trailingSpace
# Remove trailing space at end of a line.
# `--trimwhitespace` | Trim trailing space: "always" (default) or "nonblank-lines"
--trimwhitespace nonblank-lines

# --enable typeSugar
# Prefer shorthand syntax for Arrays, Dictionaries and Optionals.
# `--shortoptionals` | Use ? for optionals "always" (default) or "except-properties"

# --enable unusedArguments
# Mark unused function arguments with `_`.
# `--stripunusedargs` | "closure-only", "unnamed-only" or "always" (default)

--enable void
# Use `Void` for type declarations and `()` for values.
# `--voidtype` | How void types are represented: "void" (default) or "tuple"

# --enable wrap
# Wrap lines that exceed the specified maximum width.
# `--maxwidth` | Maximum length of a line before wrapping. defaults to "none"
# `--nowrapoperators` | Comma-delimited list of operators that shouldn't be wrapped
# `--assetliterals` | Color/image literal width. "actual-width" or "visual-width"
# `--wrapternary` | Wrap ternary operators: "default", "before-operators"

# --enable wrapArguments
# Align wrapped function arguments or collection elements.
# `--wraparguments` | Wrap all arguments: "before-first", "after-first", "preserve"
# `--wrapparameters` | Wrap func params: "before-first", "after-first", "preserve"
# `--wrapcollections` | Wrap array/dict: "before-first", "after-first", "preserve"
# `--closingparen` | Closing paren position: "balanced" (default) or "same-line"
# `--wrapreturntype` | Wrap return type: "if-multiline", "preserve" (default)
# `--wrapconditions` | Wrap conditions: "before-first", "after-first", "preserve"
# `--wraptypealiases` | Wrap typealiases: "before-first", "after-first", "preserve"
# `--wrapeffects` | Wrap effects: "if-multiline", "never", "preserve"

# --enable wrapAttributes
# Wrap @attributes onto a separate line, or keep them on the same line.
# `--funcattributes` | Function @attributes: "preserve", "prev-line", or "same-line"
# `--typeattributes` | Type @attributes: "preserve", "prev-line", or "same-line"
# `--varattributes` | Property @attributes: "preserve", "prev-line", or "same-line"

# --enable wrapConditionalBodies
# Wrap the bodies of inline conditional statements onto a new line.

# --enable wrapEnumCases
# Writes one enum case per line.
# `--wrapenumcases` | Wrap enum cases: "always" (default) or "with-values"

# --enable wrapMultilineStatementBraces
# Wrap the opening brace of multiline statements.

# --enable wrapSingleLineComments
# Wrap single line `//` comments that exceed the specified `--maxwidth`.

# --enable wrapSwitchCases
# Writes one switch case per line.

# --enable yodaConditions
# Prefer constant values to be on the right-hand-side of expressions.
# `--yodaswap` | Swap yoda values: "always" (default) or "literals-only"



--exclude FloatplaneAPIClient,BuildTools
